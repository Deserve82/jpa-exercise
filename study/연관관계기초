# 연관 관계 매핑

방향 - 단방향, 양방향이 있다. 엔티티 둘 중 한쪽만 참조하는 것이 단방향이라 하고 양쪽 모두 서로 참조하는 것이 양방향 관계라 한다. 테이블은 항상 양방향 관계이다.
다중성 - 다대일, 일대다, 일대일, 다대다 다중성이 있다.
연관관계 주인 - 객체를 양방향 연관관계로 만들면 연관관계의 주인을 정해야 한다.

## 단방향 연연관관계

다대일 관계

객체연관관계와 테이블 연관관계의 가장 큰 차이이다.
참조를 통한 연관관계는 언제나 단방향이다. 객체간의 연관관계를 양방향으로 만드려면 반대쪽에도 필드를 추가해서 참조를 보관해야지만 양방향 관계가 가능하다.
사실 이것은 양방향 보다 단방향 관계 2개이다.

반면 테이블은 외래키 하나로만 양방향 조인이 가능하다.

객체 vs 테이블 연관관계 정리
- 객체는 참조로 연관관계를 맺는다 - get을 통해 참조를 사용
- 테이블은 외래 키로 연관관계를 맺는다 - join을 통해 서로 사용

### 순수한 객체 연관관계

```java
public class Member{
    private String id;
    private String username;
    
    private Team team;
    
    public void setTeam(Team team) {
        this.team = team;
    }
    
    public Team getTeam() {
        return team;
    }
}

public class Team {
    private String id;
    private String name;
}
```

위 회원에서 getTeam()을 통해 참조를 할 수 있다. 이 객체는 참조를 통해 연관관계를 탐색할 수 있는데 이것을 **객체 그래프 탐색**이라한다.

이제 이것을 JPA를 통해 매핑해야 한다.

```java
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;

@Entity
public class Member {

    @Id
    private String id;
    private String username;

    @ManyToOne
    @JoinColumn(name = "TEAM_ID") // 외래키를 매핑할 때 사용된다. 이 어노테이션은 생략이 가능하다.
    // 생략한다면 default로 {필드명}+_+{참조하는 테이블의 컬럼명}, 즉 team_TEAM_ID가 된다.
    private Team team;

    public void setTeam(Team team) {
        this.team = team;
    }

    public Team getTeam() {
        return team;
    }
}

@Entity
public class Team {

    @Id
    @Column(name = "TEAM_ID")
    private String id;
    private String name;
}
```

@ManyToOne 옵션
- optional -> 기본값은 true이며 false로 설정한다면 연관된 엔티티가 항상 있어야 한다.
- fetch -> 글로벌 페치 전략을 사용한다 (기본 값은 @ManyToOne은 FetchType.EAGER, @ONETOMANY는 LAZY이다.)
- cascade -> 영속성 전이 기능을 사용한다.

@OneToOne 역시 다대일과 비슷하다. 다만 반대편 관계에 따라 선택하면 된다. 반대편이 일대다 관계면 다대일을 사용하면 되고,
반대편이 일대일이면 일대일을 사용하면 된다. 

## 연관관계 사용

연관관계의 등록, 수정, 삭제, 조회를 알아보자

```java

public class Test() {
    public void testSave() {
        Team team1 = new Team("team1", "팀1");
        em.persist(team1);
        
        Member member1 = new Member("member1", "멤버1");
        member1.setTeam(team1);
        em.persist(member1);
    }
}
```
JPA에서 엔티티를 저장 할 때 연관된 모든 엔티티는 영속상태여야 한다.

SQL 쿼리를 보면 외래 키 값으로 참조된 팀의 식별자 값인 "team1"이 입력된 것을 확인 할 수 있다.

### 조회

연관관계가 엔티티를 조회하는 방법은 크게 2가지이다.
- 객체 그래프 탐색 (객체 연관관계를 사용한 조회)
- 객체지향 쿼리 사용 (JPQL)

위에서 저장한 member.getTeam()을 통해 엔티티가 조회가능하다. 이것을 객체 그래프 탐색이라한다.
jpql 은 join문을 이용하여 조회한다.

### 수정

```java
public class Test() {
    private void updateRelation() {
        Team team2 = new Team("2", "2");
        em.persist(team2);
        
        Member member = em.find(Member.class, "member1");
        member.setTeam(team2);
    }
}
```

수행되는 쿼리는 다음과 같다
```sql
UPDATE member
SET
  TEAM_ID = '2'
WHERE
  ID='member1';
```

### 연관관계 제거
```java
public class Test() {
    private void updateRelation() {
        Member member = em.find(Member.class, "member1");
        member.setTeam(null);
    }
}
```

수행되는 쿼리는 다음과 같다
```sql
UPDATE member
SET
  TEAM_ID = null
WHERE
  ID='member1';
```

### 연관된 엔티티 삭제

연관된 엔티티를 삭제하려면 관계를 먼저 제거 하고 삭제해야한다. 

## 양방향 연관관계

이제는 팀에서 회원을 접근하는 관계를 추가하자. 데이터베이스는 미리 말했던 것처럼 양방향 관계이기 때문에 추가할 것이 전혀 없다.

```java
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.OneToMany;

@Entity
public class Team {

    @Id
    @Column(name = "TEAM_ID")
    private String id;
    private String name;

    @OneToMany(mappedBy = "team")
    private List<Member> members = new ArrayList<Memeber>();
}
```

mappedBy 속성은 양방향 매핑일 때 사용하는데 반대쪽 매핑 필드의 이름을 값으로 넘겨주면 된다. 


## 연관관계의 주인

@OneToMany만 있으면 되지 왜 mappedBy가 필요한 것일까? 엄밀히 말하면 객체에는 양방향 관계라는 것이 없다.
서로 단방향을 2개를 붙여서 양방향처럼 보이게 할 뿐이다. 

다시 강조하지만 테이블은 외래 키 하나로 두 테이블의 연관관계를 관리한다. 엔티티를 단방향으로 매핑하면 참조를 하나만 사용하므로 
이 참조로 외래키를 관리하면 된다.

하지만 엔티티를 양방향으로 배핑하면 두 곳에서 서로 참조한다. 따라서 연관관계를 관리하는 포인트는 2곳으로 늘어난다.
엔티티를 양방향 연관관계로 설정하면 객체의 참조는 둘인데 외래키는 하나다. 따라서 여기에서 차이가 발생한다.

그렇다면 둘중 어떤 관계를 사용해서 외래키를 관리해야 할까? 바로 이런 차이로 인해서 두 객체 연관관계 중 하나른 정해서 테이블의 외래키를 관리해야 하는데
이것을 연관관계의 주인이라 한다.

### 양방향 매핑, 연관관계의 주인

양방향 연관관계 매핑 시 지켜야할 규칙이 있는데 두 연관관계 중 하나를 연관관계의 주인으로 정해야 한다.
연관관계의 주인만이 데이터베이스 연관관계와 매핑되고 외래키를 관리 (등록, 수정, 삭제) 할 수 있다. 반면 주인이 아닌 쪽은 읽기만 가능하다.

어떤 연관관계를 주인으로 정할지는 mappedBy 속성을 사용하면 된다.
- 주인은 mappedBy 속성을 사용하지 않는다.
- 주인이 아니면 mappedBy 속성을 사용해서 속성의 값으로 연관관계의 주인을 지정해야 한다.

연관관계의 주인을 정한다는 것은 사실 외래키 관리자를 선택하는 것이다. 그렇기에 위 예시에서는 TEAM_ID 외래키를 가지고 있는 쪽이 주인이 되어야한다.

### 연관관계의 주인은 외래키가 있는 곳
연관관계의 주인은 테이블에 외래키가 있는 곳으로 정해야 한다. 
연관관계의 주인만 데이터베이스 연관관계와 매핑이되고 외래키를 관리 할 수 있다. 주인이 아닌 반대편은 읽기만 가능하고 외래키를 변경하지 못한다.

마찬가지로 테이블에서 다대일, 일대일 관계에서는 무조건 다 쪽이 외래키를 가진다. 따라서 @ManyToOne에는 mappedBy 속성이 없다.

## 양방향 연관관계 저장

전에 위에서 봤던 코드는 주인관계에 있는 엔티티가 생성되서 Team을 셋팅하는 순간에 주인이 아닌 방향은 따로 값을 설정하지 않아도 데이터 베이스
외래 키 값이 정상 입력된다. 따라서 team1.getMembers().add(member1) 이런 것이 필요 없다는 것이다.

## 양방향 관계의 주의점

양방향 관계에서 가장 많이 하는 실수는 연관관계 주인에 값을 입력하지 않고 주인이 아닌 곳에만 값을 입력하는 것이다.
데이터 베이스 외래 키값이 정상적으로 저장되지 않으면 이것부터 의심해보자.

위 코드에서 setTeam(Team1)을 하지 않고 team1.getMembers().add(member1)를 하게 된다면 외래키가 설정되지 않고 멤버에 TEAM_ID 값이 null 값이 된다.

즉 연관관계의 주인만이 외래 키의 값을 변경 할 수 있다.

### 순수한 객체까지 고려한 양방향 관계

그래도 객체 관점에서 양쪽 방향 모두에 값을 입력해주는 것이 가장 안전하다. 양쪽 방향 모두 값을 입력하지 않으면 JPA를 사용하지 않는 순수한 객체 상태에서
심각한 문제가 발생 할 수 있다.

```java
// JPA를 사용하지 않는 순순한 객체
public class Test() {
    public void test_순수한_객체_양방향() {
        Team team1 = new Team("test1", "팀1");
        Member member1 = new Member("member1", "멤버1");
        Member member2 = new Member("member2", "멤버2");
        
        member1.setTeam(team1);
        member2.setTeam(team1);
        
        List<Member> members = team1.getMembers();
        members.size(); // 얘는 0 값이 나온다.
    }
}
```
객체 까지 고려한다면 양쪽 관계를 다 맺어야 한다.
```java
team1.getMembers().add(member1);
team1.getMembers().add(member2);
```

결론적으로는 객체의 양방향 연관관계는 양쪽 모두 관계를 맺어주자

### 연관관계 편의 메소드
양방향 연관관계는 결국 양쪽 다 신경써야 한다. 그렇기에 setTeam()이나 getMembers().add() 같이 각각 호출한다. 실수로 둘 중하나만 호출해서
양방향이 깨지는 경우가 있다. 그렇기 때문에 두 코드는 하나인 것 처럼 사용하는 것이 안전하다.

```java
public void setTeam(Team team){
    this.team = team;
    team.getMembers().add(this);
}
```

이렇게 한 번에 양방향 관계를 설정하는 메소드를 연관관계 편의 메소드라 한다.

### 편의 메소드 작성 시 주의사항
```java
public void setTeam(Team team){
    this.team = team;
    team.getMembers().add(this);
}
```
위 코드를 그대로 사용한다면 다음과 같은 문제가 생긴다.

```java
member.setTeam(teamA);
member.setTeam(teamB);

Member member = teamA.getMember(); // member1이 여전히 존재?
```
teamB로 변경할 때에 기존 teamA의 연관관계를 삭제하지 않았다. 그래서 기존의 연관관계를 삭제하는 코드를 추가해야한다.

```java
public void setTeam(Team team){
    if (this.team != null) {
        team.getMember().remove(this);
    }
    this.team = team;
    team.getMembers().add(this);
}
```


## 정리

- 단방향 매핑으로만 테이블과 객체의 연관관계 매핑은 이미 완료되었다.
- 단방향을 양방향으로 만들면 반대방향으로 객체 그래프 탐색 기능이 추가된다.
- 양방향 연관관계를 매핑하려면 객체에서 양쪽 방향을 모두 관리히야 한다.

양방향 매핑은 복잡하다. 그렇기에 우선 단방향 매핑만 설정하고 만약 반대 방향으로 객체 그래프 탐색이 필요 할 때에만 양방향을 추가해도 된다.
