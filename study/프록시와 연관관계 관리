# 프록시와 연관관계 관리

## 프록시

엔티티를 조회할 때 연관된 엔티티들이 항상 사용되는 것은 아니다. 엔티티에 연결된 객체가 실제 사용될 때에 조회하는 것이다. 그런데 
이런 지연로딩 기능을 사용하려면 실제 엔티티 객체 대신에 데이터베이스 조회를 지연 할 수 있는 가짜 객체가 필요한데 이것을 프록시 객체라한다.

JPA 표준 명세는 지연로딩의 구현방법을 JPA 구현체에 위임했다. 뒤에 내용들은 따라서 구현체인 하이버네이트에 관련된 내용이다.

### 프록시 기초

JPA 에서 식별자로 엔티티 하나를 조회할 때에는 find()를 사용한다. 이 메소드는 영속성 컨텍스트가 없으면 데이터베이스를 조회한다.
만약 실제 사용하는 시점까지 데이터베이스 조회를 미루고 싶다면 getReference() 메소드를 사용하면 된다. 이 메소드를 호출할 때 JPA는 데이터베이스를 조회하지도 않고
실제 엔티티 객체도 생성하지 않는다. 대신에 데이터베이스 접근을 위임한 프록시 객체를 반환한다. 

- 프록시의 특징 : 프록시 클래스는 실제 클래스를 상속 받아서 만들어지므로 실제 클래스와 겉 모양이 같다. 
- 프로시 객체의 초기화 : 실제 사용될 때 데이터베이스를 조회해서 실제 엔티티 객체를 생성하는데 이것을 프록시 객체의 초기화라 한다.

초기화 과정은 다음과 같다
1. 프록시 객체에 member.getName()을 호출해서 실제 데이터를 조회한다.
2. 프록시 객체는 실제 엔티티가 생성되어 있지 않으면 영속성 컨텍스트에 실제 엔티티 생성을 요청하는데 이것을 초기화라 한다.
3. 영속성 컨텍스트는 데이터베이스를 조회해서 실제 엔티티 객체를 생성한다.
4. 프록시 객체는 생성된 실제 엔티티 객체의 참조를 Member target 멤버 변수에 보관한다.
5. 프록시 객체는 실제 엔티티 객체의 getName()을 호출해서 결과를 반환한다.

특징은 다음과 같다
- 프록시 객체는 처음 사용할 때 한 번만 초기화 된다
- 프록시 객체를 초기화한다고 프록시 객체가 실제 엔티티로 바뀌는 것은 아니다. 초기화 되면 target이라는 멤버 변수로 접근이 가능한 것이다.
- 프록시 객체는 원본 엔티티를 상속받은 객체이므로 타입 체크시에 주의해야 한다.
- 영속성 컨텍스트에 찾는 엔티티가 이미 있으면 데이터베이스를 조회하지는 않는다
- 초기화는 영속성 컨텍스트의 도움을 받아야 가능하다. 즉, 준영속성 상태는 문제가 발생한다.

```java
Member member = em.getReference(Member.class ,"id1");
transaction.commit();
em.close();

member.getName(); -> 준영속 상태에서 초기화 시도로 에러 반환
```

### 프록시와 식별자
엔티티를 프록시로 조회할 때 식별자 값을 파라미터로 전달하는데 프록시 객체는 이 식별자 값을 보관한다.

```java
Team team = em.getReference(Team.class, "team1");
team.getId(); // 초기화 되지 않음 - **단, 엔티티 접근 방식을 프로퍼티로 설정한 경우에만 초기화 하지 않는다. (@Access(AccessType.PROPERTY))
```

만약 엔티티 접근 방식을 필드로 설정했다면 getId() 메소드가 id만 조회하는 메소드인지 다른 필드까지 활용해서 어떤일을 하는 메소드인지 알지 못해 프록시 객체를 초기화한다.
(내가 가장 궁금했던 부분!)

연관관계를 설정할 때는 식별자 값만 사용하므로 프록시를 사용하면 데이터 베이스 접근 숫자를 줄일 수 있다. 참고로 연관관계를 설정할 때에는 엔티티 접근 방식을 필드로 설정해도
프록시를 초기화 하지 않는다.

### 프록시 확인
JPA가 제공하는 PersistenceUnitUtil.isLoad(Object entity) 메소드를 사용하면 프록시 인스턴스의 초기화 여부를 확인 할 수 있다.
아직 초기화가 안되었다면 False를 반환하고 이미 초기화가 되었거나 프록시 인스턴스가 아니라면 True를 반환한다.

조회한 엔티티가 진짜 엔티티인지, 프록시인지 확인하려면 클래스명을 직접 호출해보면된다. ...javassist... 라 되어있다.
하이버네이트는 프록시도 강제 초기화 할 수 있는데, initialize()를 사용하면 된다.

## 즉시 로딩과 지연 로딩

프록시 객체는 주로 연관된 엔티티를 지연 로딩할 때 사용한다.

- 즉시로딩 : 엔티티를 조회할 때 연관된 엔티티도 함께 조회한다. (fetch = Fetch.EAGER)
- 지연로딩 : 연관된 엔티티를 실제 사용할 때 조회한다 (fetch = Fetch.LAZY)

### 즉시 로딩
대부분의 JPA 구현체들은 즉시 로딩을 최적화 하기 위해 가능하면 조인쿼리를 사용한다. 

**null 제약 조건과 JPA 조인 전략**
위에서 실행한 조인 쿼리가 내부 조인인자 외부조인인지 잘 봐야한다. JPA는 기본적으로 null일 것을 고려해서 외부 조인을 사용한다. 하지만
외부 조인보다 내부 조인이 성능과 최적화에 더 유리하다. 그래서 내부 조인을 쓰기 위해서는 @JoinColumn 에 nullable=false 옵션만 주면 내부 조인을 사용한다.

### 지연 로딩

위에서 말했던 것처럼 실제 데이터가 필요한 순간이 되서야 데이터베이스를 조회해서 프록시 객체를 초기화한다.
만약 대상이 영속성 컨텍스트에 저장이 되어있으면 프록시가 아니라 엔티티 객체를 가져와 사용한다.

### 즉시로딩, 지연로딩 정리

처음부터 연관된 엔티티를 모두 영속성 컨텍스트에 올려두는 것은 현실적이지 않다. 그렇다고 필요할 때마다 SQL을 실행해서 연관된 엔티티를 
지연로딩하는 것도 최적화 관점에서 보면 꼭 좋은 것만은 아니다. 

결국 연관된 엔티티를 즉시 로딩하는 것이 좋은지 아니면 실제 사용할 때까지 지연해서 로딩하는 것이 좋은지는 상황에 따라 다르다.

+하이버네이트는 엔티티를 영속상태로 만들 때 엔티티에 컬랙션이 있으면 컬렉션을 추가하고 관리할 목적으로 원본 컬렉션을 하이버네이트가 제공하는
내장 컬렉션으로 변경하는데 이것을 컬렉션 래퍼라 한다. 엔티티를 지연로딩하면 프록시 객체를 사용해서 지연 로딩을 수행하지만, 컬렉션은 컬렉션 래퍼가 지연로딩을
처리해준다. 결국 프록시이긴해서 그냥 프록시라고 해도 된다. 참고로 컬렉션은 컬렉션에서 실제 데이터를 호출해 와야 초기화가 된다. (.get(0))

### JPA 기본 fetch 전략

- @ManyToOne, @OneToOne : 즉시 로딩
- @OneToMany, @ManyToMany : 지연 로딩

추천하는 방법은 모두 지연로딩을 하고 개발할 때에 실제 사용하는 것을 보고 꼭 필요한 곳만 지연로딩하는 방법이 제일 괜찮다.

### 컬렉션에 FetchType.EAGER 사용 시 주의점

- 컬렉션을 하나 이상 즉시 로딩하는 것은 권장핮지 않는다.
- 컬렉션 즉시 로딩은 항상 외부조인을 사용한다.

## 영속성 전이 : CASCADE
특정 엔티티를 영속 상태로 만들 때 연관된 엔티티도 함께 영속 상태로 만들고 싶으면 영속성 전이를 사용하면된다.
쉽게 말해서 영속성 전이를 사용하면 부모 엔티티를 저장할 때 자식 엔티티도 함께 저장될 수 있다.

```java
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

@Entity
public class Parent {

    @Id
    @GeneratedValue
    private Long id;

    @OneToMany(mappedBy = "parent")
    private List<Child> children = new ArrayList();
}

@Entity
public class Child {

    @Id
    @GeneratedValue
    private Long id;

    @ManyToOne
    private Parent parent;
}
```

JPA 에서 엔티티를 저장할 때 연관된 모든 엔티티는 영속상태여야 한다. 따라서 부모 엔티티를 영속으로 만들고 자식도 각각 만든 후에 영속
상태로 만든다. 이럴 때 영속성 전이를 사용하면 부모만 영속상태로 만들면 연관된 자식들까지 영속상태로 만들 수 있다.

```java
import javax.persistence.CascadeType;

@Entity
public class Parent {

    @Id
    @GeneratedValue
    private Long id;

    @OneToMany(mappedBy = "parent", cascade = CascadeType.PERSIST)
    private List<Child> children = new ArrayList();
}
```

부모를 영속화 할 때 연관된 자식들도 영속화를 위해 옵션을 설정했다. 

```java
private static void saveWithCascade(EntityManager em) {
    Child c1 = new Child();
    Child c2 = new Child();
    
    Parent p = new Parent();
    c1.setParent(p);
    c2.setParent(p);
    p.getChildren().add(c1);
    p.getChildren().add(c2);
    em.persist(p); // 부모 저장, 연관된 자식들 저장
        }
```
영속성 전이는 연관관계를 매핑하는 것과는 아무 관련이 없다. 단지 엔티티를 영속화할 때 연관된 엔티티도 같이 영속화하는 편리함을 제공할 뿐이다.

### 영속성 전이: 삭제
방금 저장한 부모와 자식 엔티티를 모두 제거하려면 각각의 엔티티를 하나씩 제거한다.

이를 위해 영속성 전이에 삭제를 사용할 수 있다.
```java
    @OneToMany(mappedBy = "parent", cascade = CascadeType.REMOVEE)
    private List<Child> children = new ArrayList();


Parent findParent = em.find(Parent.class, 1L);
em.remove(findParent);
```

### CASCADE의 종류
ALL
PERSIST
MERGE
REMOVE
REFRESH
DETACH

등이 있다. 참고로 PERSIST와 REMOVE는 전이가 바로 발생하지 않고 플러시를 호출 할 때 전이가 발생한다.

## 고아 객체

JPA는 부모 엔티티와 연관관계가 끊어진 자식 엔티티를 자동으로 삭제하는 기능을 제공하는데 이것을 고아 객체 제거라고 한다.
이 기능을 사용해서 부모 엔티티의 컬렉션에서 자식엔티티의 참조만 제거하면 자식엔티티가 자동으로 삭제되도록 해보자

```java
import javax.persistence.CascadeType;

@Entity
public class Parent {

    @Id
    @GeneratedValue
    private Long id;

    @OneToMany(mappedBy = "parent", orphanRemoval = true)
    private List<Child> children = new ArrayList();
}
```

```java
Parent p = em.find(Parent.class, id);
p.getChildren().remove(0); // 자식 엔티티를 컬렉션에서 제거

// DELETE FROM CHILD WHERE ID=?
```

고아 객체 제거 기능은 영속성 컨텍스트를 플러시할 때 적용된다. 고아 객체는 참조가 제거된 엔티티는 다른 곳에서 참조하지 않는 고아 객체로 보고 삭제하는 기능이다.
따라서 이 기능은 참조하는 곳이 하나일 때만 이 기능을 적용해야 한다. 만약 삭제한 엔티티를 다른곳에서도 참조하면 문제가 될 수 있다.
이런 이유로 @OneToOne, @OneToMany 에만 사용할 수 있다. 이것은 CascadeType.REMOVE 를 설정한 것과 같다.

## 영속성 전이 + 고아 객체, 생명주기
CascadeType.ALL 과 orphanRemoval = true 를 동시에 사용하면 어떻게 될까? 

이렇게 되면 엔티티는 em.persist()를 통해 영속화 되고 em.remove() 를 통해 제거된다. 이것은 엔티티 스스로 생명 주기를 관리한다는 뜻이다.
이 두 옵션을 활성화 하면 부모 엔티티를 통해 자식의 생명 주기를 관리한다는 의미이다. 

참고로 영속성 전이는 DDD의 Aggregate Root 개념을 구현할 때 사용하면 편리하다.